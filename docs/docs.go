// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/luma/generations": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Submit luma generate video task",
                "parameters": [
                    {
                        "description": "submit generate video",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.GenRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "generate result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.VideoTask"
                            }
                        }
                    }
                }
            }
        },
        "/luma/generations/": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Submit luma generate video task",
                "responses": {
                    "200": {
                        "description": "video tasks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.VideoTask"
                            }
                        }
                    }
                }
            }
        },
        "/luma/generations/file_upload": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Upload image to luma",
                "parameters": [
                    {
                        "description": "Upload image params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.UploadReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "upload result",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.FileUploadResult"
                            }
                        }
                    }
                }
            }
        },
        "/luma/generations/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Submit luma generate video task",
                "responses": {
                    "200": {
                        "description": "video tasks",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/main.VideoTask"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.FileUploadResult": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "presigned_url": {
                    "type": "string"
                },
                "public_url": {
                    "type": "string"
                }
            }
        },
        "main.GenRequest": {
            "type": "object",
            "properties": {
                "aspect_ratio": {
                    "description": "require",
                    "type": "string"
                },
                "expand_prompt": {
                    "description": "require",
                    "type": "boolean"
                },
                "image_url": {
                    "description": "option, uploaded refer image url",
                    "type": "string"
                },
                "user_prompt": {
                    "description": "require",
                    "type": "string"
                }
            }
        },
        "main.UploadReq": {
            "type": "object",
            "properties": {
                "url": {
                    "description": "support public url \u0026 base64",
                    "type": "string"
                }
            }
        },
        "main.Video": {
            "type": "object",
            "properties": {
                "height": {
                    "type": "integer"
                },
                "thumbnail": {},
                "url": {
                    "type": "string"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "main.VideoTask": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "estimate_wait_seconds": {},
                "id": {
                    "type": "string"
                },
                "liked": {},
                "prompt": {
                    "type": "string"
                },
                "state": {
                    "description": "\"pending\", \"processing\", \"completed\"",
                    "type": "string"
                },
                "video": {
                    "$ref": "#/definitions/main.Video"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
